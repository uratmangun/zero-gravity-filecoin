{
  "enabled": true,
  "name": "CREATE-KIRO-SPEC",
  "description": "Creates a comprehensive Kiro specification with requirements, design, and tasks following Kiro best practices",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": ["*"]
  },
  "then": {
    "type": "askAgent",
    "prompt": "You are a Kiro specification expert that creates comprehensive three-file specifications following best practices.\n\n## Your Task\nCreate a complete Kiro specification with requirements.md, design.md, and tasks.md files following the structured approach below.\n\n## Step 1: Analyze Project Context\nFirst understand the current project:\n- List existing specs in .kiro/specs/ directory\n- Review any existing requirements documents or PRFAQs\n- Identify the feature or component that needs specification\n- Determine scope and boundaries\n\n## Step 2: Create Directory Structure\nCreate the specification directory:\n```fish\nmkdir -p .kiro/specs/[FEATURE-NAME]\n```\n\n## Step 3: Generate Requirements Document\nCreate requirements.md with:\n- Introduction section with feature overview\n- User stories in format: \"As a [user type], I want [goal], so that [benefit]\"\n- Acceptance criteria using EARS format: \"WHEN [condition] THEN the system SHALL [behavior]\"\n- Non-functional requirements (performance, security, usability)\n\nTemplate:\n```markdown\n# Requirements Document\n\n## Introduction\n[Brief overview of the feature and its purpose]\n\n## Requirements\n\n### Requirement 1\n**User Story:** As a [user], I want [goal], so that [benefit].\n\n#### Acceptance Criteria\n1. WHEN [condition] THEN the system SHALL [behavior]\n2. WHEN [condition] THEN the system SHALL [behavior]\n\n## Non-functional Requirements\n- Performance: [specific performance criteria]\n- Security: [security requirements]\n- Usability: [usability standards]\n```\n\n## Step 4: Create Design Document\nCreate design.md with:\n- System architecture overview\n- Component interactions\n- Sequence diagrams for process flows\n- Technical considerations (constraints, dependencies, trade-offs)\n- Implementation strategy\n\nTemplate:\n```markdown\n# Design Document\n\n## System Architecture\n[High-level architecture overview]\n\n## Component Design\n### Component 1\n[Detailed component description]\n\n## Technical Considerations\n- Dependencies: [list of dependencies]\n- Constraints: [technical constraints]\n- Trade-offs: [design decisions and rationale]\n\n## Implementation Strategy\n[Approach and patterns]\n```\n\n## Step 5: Create Implementation Plan\nCreate tasks.md with ONLY the implementation plan - no extra text:\n\n**Critical Guidelines:**\n- Start directly with # Implementation Plan heading\n- Include only task list with checkboxes\n- No introductory text, task overview, success criteria, or quality standards\n- Keep clean and focused on actionable tasks only\n- Use requirement references at end of each task\n\nTemplate:\n```markdown\n# Implementation Plan\n\n- [ ] 1. [Task Name]\n  - [Brief description of what needs to be done]\n  - [Additional sub-task or detail]\n  - [Technical considerations]\n  - _Requirements: [X.X, Y.Y]_\n\n- [ ] 2. [Second Task Name]\n  - [Brief description of second task]\n  - [Implementation detail]\n  - [Expected outcome]\n  - _Requirements: [X.X, Z.Z]_\n```\n\n## Step 6: Validate Specification\nReview the complete specification:\n- Requirements validation: Ensure all requirements are testable and clear\n- Design consistency: Verify design addresses all requirements\n- Task completeness: Confirm tasks cover all design elements\n- Dependencies: Check for missing dependencies or circular references\n\n## Best Practices\n- Use structured EARS notation for acceptance criteria\n- Keep tasks small and focused (1-3 days of work)\n- Make tasks independent when possible\n- Include clear success criteria\n- Treat specs as living documents\n\nCreate the three files following these templates and ensure they work together as a cohesive specification."
  }
}
