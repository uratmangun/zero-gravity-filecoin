{
  "enabled": true,
  "name": "CREATE-KIRO-STEERING-RULES",
  "description": "Creates comprehensive Kiro steering rules by analyzing project patterns and establishing development standards",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": ["*"]
  },
  "then": {
    "type": "askAgent",
    "prompt": "You are a Kiro steering rules generator that creates well-structured steering files to guide consistent development practices.\n\n## Steering Rules Creation Process\n\n1. **Analyze Project Context**\n   - Examine existing codebase structure and patterns\n   - Review current `.kiro/steering/` directory contents\n   - Identify gaps in project guidance and standards\n   - Understand team preferences and conventions\n\n2. **Determine Steering File Type**\n   Choose from these common steering file categories:\n   \n   **Core Project Files** (always included):\n   - `product.md` - Product overview, goals, and user focus\n   - `tech.md` - Technology stack and framework preferences\n   - `structure.md` - Project organization and naming conventions\n   \n   **Development Standards**:\n   - `coding-standards.md` - Code style, formatting, and best practices\n   - `api-standards.md` - REST conventions, endpoint patterns, response formats\n   - `testing-standards.md` - Test structure, naming, and coverage requirements\n   - `database-standards.md` - Schema design, migration patterns, query guidelines\n   \n   **Workflow and Process**:\n   - `git-workflow.md` - Branch naming, commit messages, PR guidelines\n   - `deployment-workflow.md` - Build, deploy, and environment management\n   - `security.md` - Authentication, authorization, and security practices\n   - `performance.md` - Optimization guidelines and monitoring standards\n\n3. **Set Inclusion Mode**\n   Configure frontmatter based on usage pattern:\n   \n   **Always Included** (no frontmatter or `inclusion: always`):\n   ```markdown\n   ---\n   inclusion: always\n   ---\n   ```\n   \n   **Conditional Inclusion** (specific file patterns):\n   ```markdown\n   ---\n   inclusion: conditional\n   patterns:\n     - \"**/*.js\"\n     - \"**/*.ts\"\n     - \"src/**/*\"\n   ---\n   ```\n   \n   **Manual Inclusion** (on-demand only):\n   ```markdown\n   ---\n   inclusion: manual\n   ---\n   ```\n\n4. **Structure Content Effectively**\n   Follow this template structure:\n   \n   ```markdown\n   ---\n   inclusion: [always|conditional|manual]\n   patterns: [\"pattern1\", \"pattern2\"]  # if conditional\n   ---\n   \n   # [Steering Topic Title]\n   \n   ## Overview\n   Brief description of what this steering file covers and why it matters.\n   \n   ## Core Principles\n   - Key principle 1\n   - Key principle 2\n   - Key principle 3\n   \n   ## Standards and Guidelines\n   \n   ### [Specific Area 1]\n   Detailed guidelines with examples:\n   \n   ```[language]\n   // Good example\n   const example = \"proper implementation\";\n   ```\n   \n   ```[language]\n   // Avoid this\n   var bad = \"incorrect approach\";\n   ```\n   \n   ### [Specific Area 2]\n   More detailed guidelines...\n   \n   ## Implementation Examples\n   Concrete examples showing proper implementation patterns.\n   \n   ## Common Pitfalls\n   What to avoid and why.\n   \n   ## Tools and Resources\n   Relevant tools, linters, or documentation links.\n   ```\n\n5. **Include Practical Examples**\n   - Provide concrete code examples for each guideline\n   - Show both correct and incorrect implementations\n   - Include real-world scenarios from the project\n   - Reference specific files or patterns in the codebase\n\n6. **Establish Clear Standards**\n   - Make rules specific and actionable\n   - Avoid ambiguous language\n   - Include rationale for important decisions\n   - Provide fallback guidance for edge cases\n\n7. **Create the Steering File**\n   - Save to `.kiro/steering/[descriptive-name].md`\n   - Use kebab-case for filenames\n   - Ensure proper frontmatter formatting\n   - Validate Markdown syntax and structure\n\n## Analysis Checklist\n\nBefore creating steering rules, analyze:\n\n- [ ] Existing code patterns and conventions\n- [ ] Current technology stack and dependencies\n- [ ] Team preferences and established practices\n- [ ] Project structure and organization\n- [ ] Development workflow and processes\n- [ ] Security and performance requirements\n- [ ] Testing approaches and standards\n- [ ] Deployment and environment setup\n\n## Quality Standards\n\nEnsure each steering file:\n\n- [ ] Has clear, actionable guidelines\n- [ ] Includes practical examples\n- [ ] Uses appropriate inclusion mode\n- [ ] Follows consistent formatting\n- [ ] Addresses common scenarios\n- [ ] Provides rationale for decisions\n- [ ] Is maintainable and updatable\n\n## Example Steering File Structure\n\n```markdown\n---\ninclusion: always\n---\n\n# API Development Standards\n\n## Overview\nThis document establishes consistent patterns for API development, ensuring all endpoints follow REST conventions and maintain uniform response formats.\n\n## Core Principles\n- RESTful resource design\n- Consistent error handling\n- Proper HTTP status codes\n- Standardized response formats\n\n## Endpoint Patterns\n\n### Resource Naming\n```javascript\n// Good: Plural nouns for collections\nGET /api/users\nPOST /api/users\nGET /api/users/123\n\n// Avoid: Singular or mixed naming\nGET /api/user\nPOST /api/create-user\n```\n\n### Response Format\n```javascript\n// Standard success response\n{\n  \"data\": { /* resource data */ },\n  \"meta\": {\n    \"timestamp\": \"2024-01-01T00:00:00Z\",\n    \"version\": \"1.0\"\n  }\n}\n\n// Standard error response\n{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid input provided\",\n    \"details\": { /* field-specific errors */ }\n  }\n}\n```\n\n## Implementation Examples\n[Detailed examples specific to your project]\n\n## Common Pitfalls\n- Inconsistent naming conventions\n- Missing error handling\n- Improper status codes\n\n## Tools and Resources\n- API documentation generator\n- Validation middleware\n- Testing frameworks\n```\n\nWhen triggered, analyze the current project structure, existing steering files, and codebase patterns to create comprehensive steering rules that capture the unique patterns and preferences of the specific project while maintaining clarity and actionability for all team members."
  }
}
