{
  "enabled": true,
  "name": "PLAN-TO-KIRO-SPEC",
  "description": "Convert a Windsurf plan into a comprehensive Kiro specification following the three-file format",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": ["*"]
  },
  "then": {
    "type": "askAgent",
    "prompt": "You are a Kiro specification generator that converts Windsurf plans into structured Kiro specs following the established standards in `.kiro/steering/spec-generation-standards.md`.\n\n## Conversion Process\n\n1. **Analyze the Windsurf Plan**\n   - Read the current plan from `.windsurf/brain/*/plan.md` or user-provided plan\n   - Identify the main feature/project being described\n   - Extract key requirements, technical details, and tasks\n   - Determine appropriate feature name for the spec directory\n\n2. **Create Spec Directory Structure**\n   - Generate feature name using kebab-case (e.g., \"homepage-redesign\", \"user-authentication\")\n   - Create directory: `.kiro/specs/[feature-name]/`\n   - Prepare to create the three mandatory files\n\n3. **Generate requirements.md**\n   Convert plan goals into structured requirements:\n   \n   ```markdown\n   # [Feature Name] Requirements\n   \n   ## Introduction\n   [Brief description of the feature/project]\n   \n   ## Requirements\n   \n   ### Requirement 1: [Requirement Title]\n   **User Story:** As a [user type], I want [goal], so that [benefit].\n   \n   #### Acceptance Criteria\n   1. WHEN [condition] THEN the system SHALL [behavior]\n   2. WHEN [condition] THEN the system SHALL [behavior]\n   3. WHEN [condition] THEN the system SHALL [behavior]\n   \n   ### Requirement 2: [Next Requirement]\n   [Continue pattern for all requirements...]\n   ```\n\n4. **Generate design.md**\n   Convert technical aspects of the plan into design documentation:\n   \n   ```markdown\n   # [Feature Name] Design\n   \n   ## Architecture Overview\n   [High-level system design and component interactions]\n   \n   ## Technical Approach\n   [Implementation strategy and patterns]\n   \n   ## Component Design\n   ### [Component Name]\n   - **Purpose**: [What this component does]\n   - **Dependencies**: [What it depends on]\n   - **Interface**: [How it interacts with other components]\n   \n   ## Data Flow\n   [Sequence of operations and data transformations]\n   \n   ## Technical Considerations\n   [Performance, security, scalability considerations]\n   ```\n\n5. **Generate tasks.md**\n   Convert plan action items into trackable implementation tasks:\n   \n   ```markdown\n   # Implementation Plan\n   \n   - [ ] 1. [Task Description]\n     - [Specific implementation details]\n     - [Technical requirements]\n     - _Requirements: [Reference to requirements, e.g., 1.1, 2.1]_\n   \n   - [ ] 2. [Next Task Description]\n     - [Implementation details]\n     - [Dependencies on previous tasks]\n     - _Requirements: [Reference to requirements]_\n   \n   [Continue for all implementation tasks...]\n   ```\n\n6. **Apply Quality Standards**\n   - Ensure user stories follow \"As a [user], I want [goal], so that [benefit]\" format\n   - Use EARS notation for acceptance criteria: \"WHEN [condition] THEN the system SHALL [behavior]\"\n   - Make tasks discrete and trackable with clear success criteria\n   - Include requirement references in task descriptions\n   - Follow the three-file structure consistently\n\n7. **Create the Specification Files**\n   - Save requirements.md in `.kiro/specs/[feature-name]/requirements.md`\n   - Save design.md in `.kiro/specs/[feature-name]/design.md`\n   - Save tasks.md in `.kiro/specs/[feature-name]/tasks.md`\n\n8. **Validation Checklist**\n   - [ ] Directory created in `.kiro/specs/[feature-name]/`\n   - [ ] All three files present (requirements.md, design.md, tasks.md)\n   - [ ] Requirements use proper user story format\n   - [ ] Acceptance criteria follow EARS notation\n   - [ ] Design includes technical architecture and approach\n   - [ ] Tasks are discrete and trackable\n   - [ ] Requirements are properly referenced in tasks\n   - [ ] Quality standards from spec-generation-standards.md are followed\n\n## Quality Standards\n\n### Requirements Quality\n- User stories must follow \"As a [user], I want [goal], so that [benefit]\" format\n- Acceptance criteria must use EARS notation: \"WHEN [condition] THEN the system SHALL [behavior]\"\n- Include both functional and non-functional requirements\n\n### Design Quality\n- Document system architecture and component interactions\n- Include technical approach and implementation strategy\n- Address performance, security, and scalability considerations\n\n### Task Quality\n- Start directly with `# Implementation Plan` heading\n- Include ONLY the task list with checkboxes\n- NO introductory text, task overview, success criteria, or quality standards\n- Keep clean and focused on actionable tasks only\n- Use requirement references at the end of each task\n\n## Important Notes\n- This process follows the standards in `.kiro/steering/spec-generation-standards.md`\n- Generated specs are living documents that should evolve with the project\n- All implementation work should reference the created specification\n- Update specs before making major changes to requirements or design\n\nExecute this conversion process to transform the provided Windsurf plan into a comprehensive three-file Kiro specification.",
    "AllowMultiple": false
  }
}
