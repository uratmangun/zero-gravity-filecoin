{
  "enabled": true,
  "name": "CONVERT-KIRO-STEERING-TO-WINDSURF-RULES",
  "description": "Converts Kiro steering rules from .kiro/steering directory to Windsurf rules format in .windsurf/rules directory",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": ["*"]
  },
  "then": {
    "type": "askAgent",
    "prompt": "You are a rule conversion specialist that converts Kiro steering files to Windsurf rules format.\n\n## Your Task\nConvert all files from .kiro/steering/ directory to .windsurf/rules/ directory with proper Windsurf formatting.\n\n## Conversion Process\n\n### Step 1: Analyze Source Directory\n- Examine all .md files in .kiro/steering/ directory\n- Identify files with inclusion: always frontmatter (active rules)\n- Note content structure and formatting\n\n### Step 2: Prepare Target Directory\n- Ensure .windsurf/rules/ directory exists\n- Create directory if needed: mkdir -p .windsurf/rules\n\n### Step 3: Convert Each Steering File\nFor each file in .kiro/steering/:\n\na) Read source file and extract:\n   - YAML frontmatter (especially inclusion field)\n   - Main content body\n   - File structure and formatting\n\nb) Transform content:\n   - Keep same filename (e.g., shell-preferences.md)\n   - Convert YAML frontmatter from Kiro to Windsurf format:\n\n   **For inclusion: always:**\n   ```yaml\n   ---\n   name: \"[Descriptive Rule Name]\"\n   trigger: always_on\n   description: \"[Natural language description of rule purpose]\"\n   ---\n   ```\n\n   **For inclusion: fileMatch with patterns:**\n   Create separate rule files for each glob pattern:\n   ```yaml\n   ---\n   trigger: glob\n   description: \"[Description for pattern1]\"\n   globs: \"pattern1\"\n   ---\n   ```\n\n   **Examples:**\n   - JavaScript files: globs: \"*.js\"\n   - TypeScript files: globs: \"*.ts\"\n   - Source directory: globs: \"src/**/*.ts\"\n   - Supabase directory: globs: \"supabase/**/*\"\n   - Config files: globs: \"**/config.toml\"\n\nc) Write to target location:\n   - Save to .windsurf/rules/[filename].md\n   - Preserve original formatting and structure\n   - Maintain file permissions\n\n### Step 4: Handle Special Cases\n- Convert files with spaces in names to dash-separated format\n- Ensure all rule files have proper YAML frontmatter\n- Validate inclusion: always is preserved for active rules\n\n### Step 5: Verification\n- Confirm all source files converted\n- Verify target files maintain content integrity\n- Check YAML frontmatter is properly formatted\n- Ensure no content lost during conversion\n\n## File Mapping Examples\n.kiro/steering/shell-preferences.md → .windsurf/rules/shell-preferences.md\n.kiro/steering/spec-generation-standards.md → .windsurf/rules/spec-generation-standards.md\n\n## Frontmatter Conversion Examples\n\n**Shell Preferences:**\nFrom: inclusion: always\nTo: name: \"Fish Shell Execution Standards\", trigger: always_on, description: \"Enforces fish shell syntax for all terminal commands\"\n\n**Spec Generation:**\nFrom: inclusion: always\nTo: name: \"Kiro Specification Generation Requirements\", trigger: always_on, description: \"Mandates creation of comprehensive Kiro specifications\"\n\n## Quality Assurance\n- Compare file counts between source and target\n- Spot-check converted files for accuracy\n- Verify YAML frontmatter properly converted\n- Ensure trigger set to always_on for inclusion: always files\n- Maintain code examples and formatting\n\n## Important Notes\n- Use fish shell syntax for all commands\n- Maintain exact content and structure of Kiro steering files\n- Primary change is file location from .kiro/steering/ to .windsurf/rules/\n- All development standards and project rules are preserved\n- Files with inclusion: always become active Windsurf rules\n\nExecute this conversion process systematically for all steering files."
  }
}
