{
  "enabled": true,
  "name": "WINDSURF TO KIRO CONVERTER",
  "description": "Automatically converts Windsurf workflow files (.md) to Kiro agent hooks (.kiro.hook) format",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": [
      ".windsurf/workflows/*.md"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "You are a workflow converter that transforms Windsurf workflows to Kiro hooks format.\n\nWhen a Windsurf workflow file is created or modified, convert it to a Kiro hook following these steps:\n\n1. **Extract Windsurf workflow data:**\n   - Parse YAML frontmatter to get `description`\n   - Extract workflow name from filename (remove .md extension)\n   - Get the markdown content as the workflow instructions\n\n2. **Create or update Kiro hook structure:**\n   - Set `enabled: true`\n   - Use workflow name in LOWERCASE for `name` field\n   - Use frontmatter `description` for `description` field\n   - Set `version: \"1\"`\n   - Set `when.type: \"userTriggered\"`\n   - Set `when.patterns: [\"*\"]` (universal trigger)\n   - Set `then.type: \"askAgent\"`\n   - Convert markdown content to structured prompt for `then.prompt`\n\n3. **Transform content:**\n   - Convert markdown instructions to clear, actionable prompt\n   - Preserve step-by-step structure if present\n   - Include any templates or examples from the workflow\n   - Add context about the workflow's purpose\n   - Handle `// turbo` annotations by noting auto-execution preferences\n\n4. **Generate output:**\n   - Create or update `.kiro.hook` file in `.kiro/hooks/` directory (overwrite if exists)\n   - Use kebab-case filename (e.g., `auto-readme-generator.kiro.hook`)\n   - Ensure valid JSON format\n   - Preserve all essential workflow logic\n\n5. **Example conversion:**\n   From: `.windsurf/workflows/auto-readme-generator.md`\n   To: `.kiro/hooks/auto-readme-generator.kiro.hook`\n\nExecute this conversion and create or update the corresponding Kiro hook file with proper JSON structure and formatting."
  }
}