{
  "enabled": true,
  "name": "CREATE-SIMPLE-BLOG-POST",
  "description": "Creates a simple blog post about the project by analyzing its structure, features, and purpose",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": [
      "src/**/*",
      ".kiro/specs/**/*",
      "functions/**/*"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "This workflow analyzes your project and generates a simple blog post highlighting its key features, tech stack, purpose, and development methodology using Kiro specifications.\n\n1. **Analyze project structure**: Examine the project files to understand the tech stack and architecture by finding key files like package.json, README.md, and source code files.\n\n2. **Read project README**: Extract project information from README if it exists, otherwise generate blog post from project analysis.\n\n3. **Check package.json for dependencies**: Identify the tech stack from package.json by looking for popular frameworks and libraries like react, vue, angular, svelte, next, nuxt, vite, webpack, tailwind, typescript, supabase, firebase, mongodb, postgres.\n\n4. **Analyze Kiro specifications**: Examine the .kiro/specs directory to understand the development methodology:\n   - List all specification directories\n   - Read requirements.md, design.md, and tasks.md files from each spec\n   - Analyze how spec-driven development was used in the project\n   - Document the development workflow and planning approach\n\n5. **Analyze project type**: Determine if it's a web app, API, CLI tool, etc. based on file structure and dependencies.\n\n6. **Create demo content**: Prepare repository embedding format for all projects:\n   - Get repository URL from GitHub CLI or git remote\n   - Use repository embedding format: `{% embed repository_url %}`\n\n7. **Create blog post**: Generate a comprehensive blog post with the following structure:\n\n# [PROJECT_NAME]\n\n## Introduction\nBrief introduction about the project and its purpose.\n\n## What is [PROJECT_NAME]?\nDescription based on README or project analysis - describe the project's purpose and main functionality.\n\n## Tech Stack & Architecture\nList of technologies found in the project:\n- Frontend/UI technologies\n- Backend/Database technologies  \n- Development Tools\n\n## Development Methodology: Kiro Specifications\nThis project follows spec-driven development using Kiro specifications:\n- **Requirements**: User stories and acceptance criteria for each feature\n- **Design**: Technical architecture and implementation approach\n- **Tasks**: Discrete, trackable implementation steps\n\n### Specifications Created:\n[List all specs found in .kiro/specs with brief descriptions]\n\n## Key Features\n1. **Feature 1**: Describe a key feature\n2. **Feature 2**: Describe another feature\n3. **Feature 3**: Describe additional functionality\n\n## Demo\n{% embed https://github.com/[username]/[repo-name] %}\n\n## Getting Started\nInstallation and setup instructions based on project type.\n\n## Conclusion\nSummary of the development experience and key takeaways.\n\n## Technical Deep Dive\n### Project Structure\nList key source files and their purposes.\n\n### Key Dependencies\nList main dependencies from package.json.\n\n### Development Workflow\nDescribe the development process.\n\n8. **Save the blog post** as BLOG.md in the PITCH folder.\n\nThe blog post should be comprehensive, professional, and ready for customization and publishing.\n\n## Enhanced Workflow Steps:\n\n### Kiro Specs Analysis Process:\n1. List all directories in .kiro/specs/\n2. For each spec directory, read the three core files:\n   - requirements.md: Extract user stories and acceptance criteria\n   - design.md: Document technical approach and architecture decisions\n   - tasks.md: List implementation tasks and their completion status\n3. Summarize the spec-driven development approach used\n4. Highlight how specifications guided the development process\n\n### Demo Creation Process:\n1. **Get repository URL**:\n   - Use `gh repo view --json url -q .url` to get the repository URL\n   - If GitHub CLI is not available, extract repository URL from git remote: `git remote get-url origin`\n   - Use repository embedding format for all projects: `{% embed repository_url %}`\n\n### Blog Post Enhancement:\n- Include a dedicated section about the Kiro specification methodology\n- List all specifications created with brief descriptions of their purpose\n- Add repository embedding for demo content"
  }
}