name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Type check
        run: pnpm run type-check

      - name: Build for Cloudflare Workers
        run: pnpm run workers:build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Check and delete existing matching projects and workers
        id: cleanup-projects
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Get repository name for pattern matching
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          REPO_PATTERN="${REPO_NAME}-"
          
          echo "========================================="
          echo "Cleaning up existing Workers and Pages"
          echo "Pattern: ${REPO_PATTERN}*"
          echo "========================================="
          
          # Step 1: Delete matching Workers
          echo ""
          echo "Step 1: Checking for existing Workers..."
          
          # List all Workers
          WORKERS=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/workers/scripts" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json")
          
          # Extract worker names that match the pattern
          MATCHING_WORKERS=$(echo "$WORKERS" | jq -r ".result[] | select(.id | startswith(\"${REPO_PATTERN}\")) | .id" || true)
          
          if [ -n "$MATCHING_WORKERS" ]; then
            echo "Found matching Workers to delete:"
            echo "$MATCHING_WORKERS"
            echo ""
            
            # Delete each matching worker
            while IFS= read -r WORKER; do
              if [ -n "$WORKER" ]; then
                echo "Deleting Worker: $WORKER"
                DELETE_RESPONSE=$(curl -s -X DELETE \
                  "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/workers/scripts/${WORKER}" \
                  -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
                  -H "Content-Type: application/json")
                
                SUCCESS=$(echo "$DELETE_RESPONSE" | jq -r '.success')
                if [ "$SUCCESS" = "true" ]; then
                  echo "âœ“ Successfully deleted Worker: $WORKER"
                else
                  echo "âš  Warning: Failed to delete Worker: $WORKER"
                  echo "Response: $DELETE_RESPONSE"
                fi
              fi
            done <<< "$MATCHING_WORKERS"
          else
            echo "No existing Workers found matching pattern: ${REPO_PATTERN}*"
          fi
          
          # Step 2: Delete matching Pages projects
          echo ""
          echo "Step 2: Checking for existing Pages projects..."
          
          # List all Cloudflare Pages projects
          PROJECTS=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json")
          
          # Extract project names that match the pattern
          MATCHING_PROJECTS=$(echo "$PROJECTS" | jq -r ".result[] | select(.name | startswith(\"${REPO_PATTERN}\")) | .name" || true)
          
          if [ -n "$MATCHING_PROJECTS" ]; then
            echo "Found matching Pages projects to delete:"
            echo "$MATCHING_PROJECTS"
            echo ""
            
            # Delete each matching project
            while IFS= read -r PROJECT; do
              if [ -n "$PROJECT" ]; then
                echo "Deleting Pages project: $PROJECT"
                DELETE_RESPONSE=$(curl -s -X DELETE \
                  "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects/${PROJECT}" \
                  -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
                  -H "Content-Type: application/json")
                
                SUCCESS=$(echo "$DELETE_RESPONSE" | jq -r '.success')
                if [ "$SUCCESS" = "true" ]; then
                  echo "âœ“ Successfully deleted Pages project: $PROJECT"
                else
                  echo "âš  Warning: Failed to delete Pages project: $PROJECT"
                  echo "Response: $DELETE_RESPONSE"
                fi
              fi
            done <<< "$MATCHING_PROJECTS"
          else
            echo "No existing Pages projects found matching pattern: ${REPO_PATTERN}*"
          fi
          
          echo ""
          echo "========================================="
          echo "Cleanup complete"
          echo "========================================="

      - name: Generate worker name for deployment
        id: generate-worker-name
        run: |
          # Get repository name
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          # Generate random alphanumeric string
          RANDOM_STRING=$(openssl rand -hex 8 | tr -d '\n')
          
          # Combine repository name with random string
          WORKER_NAME="${REPO_NAME}-${RANDOM_STRING}"
          
          # Ensure minimum length of 26 characters
          while [ ${#WORKER_NAME} -lt 26 ]; do
            EXTRA_CHARS=$(openssl rand -hex 2 | tr -d '\n')
            WORKER_NAME="${WORKER_NAME}${EXTRA_CHARS}"
          done
          
          # Ensure worker name is valid (lowercase, alphanumeric, hyphens only)
          WORKER_NAME=$(echo "$WORKER_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
          
          echo "Generated worker name: $WORKER_NAME"
          echo "worker_name=$WORKER_NAME" >> $GITHUB_OUTPUT

      # Deploy to Cloudflare Workers
      - name: Deploy to Cloudflare Workers (Production)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          # Update wrangler.toml with the generated worker name
          sed -i "s/^name = .*/name = \"${{ steps.generate-worker-name.outputs.worker_name }}\"/" wrangler.toml
          # Deploy using opennextjs-cloudflare
          pnpm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Workers (Preview)
        if: github.event_name == 'pull_request'
        run: |
          # Update wrangler.toml with the generated worker name and preview suffix
          sed -i "s/^name = .*/name = \"${{ steps.generate-worker-name.outputs.worker_name }}-preview\"/" wrangler.toml
          # Deploy using opennextjs-cloudflare
          pnpm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}


      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = `https://${{ steps.generate-worker-name.outputs.worker_name }}-preview.workers.dev`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Preview deployment ready!\n\nðŸ”— ${deployment}`
            })
